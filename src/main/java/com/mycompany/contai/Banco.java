/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.contai;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JLabel;



/**
 *
 * @author wolsk
 */
public class Banco extends javax.swing.JFrame {
    
    private ClienteTableModel tableModel = new ClienteTableModel();
    private ClienteTableModel tbListaCliente = new ClienteTableModel();
    private int linhaClicadaParaAtualizacao = -1;
    private Cliente clienteSelecionadoParaAtualizacao;
    private javax.swing.JPanel dynamicFieldsPanel;
    
    private List<Conta> contas;
    private static int contadorDeContas = 1000; // Início do contador de contas


    /**
     * Creates new form Banco
     */
    public Banco() {
        initComponents();
        comboTipoConta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tipo de Conta", "Conta Corrente", "Conta Investimento" }));
        comboTipoConta.setSelectedItem("Tipo de Conta");
        contas = new ArrayList<>();
        
        // Adiciona as opções à comboOperacao
        comboOperacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Operação", "Saque", "Depósito", "Ver saldo", "Remunera" }));
        comboOperacao.setSelectedItem("Operação");

        
        // Adiciona um ouvinte de evento de clique do mouse à tabela de clientes
        tabClienteScroll.addMouseListener(new java.awt.event.MouseAdapter() {
        @Override
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tabClienteMouseClicked(evt); // Chama o método tabClienteMouseClicked quando ocorre um clique na tabela
        }
    });
        
        // Adiciona um ouvinte de evento de clique do mouse à tabela de clientes da tela 2
        tabelaListaClientes.addMouseListener(new java.awt.event.MouseAdapter() {
        @Override
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tabelaListaClientesMouseClicked(evt); // Chama o método tabClienteMouseClicked quando ocorre um clique na tabela
        }
    });
    }
    
    public void addConta(Conta conta) {
        contas.add(conta);
    }

    public static int gerarNumeroConta() {
        return contadorDeContas++;
    }
    
    
    private void limparCampos() {
        txtDepositoInicial.setText("");
        txtLimite.setText("");
        txtMontanteMinimo.setText("");
        txtDepositoMinimo.setText("");
        txtDepositoInicialInvest.setText("");
        txtNumeroConta.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator4 = new javax.swing.JSeparator();
        jLabel13 = new javax.swing.JLabel();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        sobrenome = new javax.swing.JPanel();
        nome = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        rg = new javax.swing.JLabel();
        cpf = new javax.swing.JLabel();
        endereco = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        txtSobreNome = new javax.swing.JTextField();
        txtCPF = new javax.swing.JTextField();
        txtRG = new javax.swing.JTextField();
        txtEndereco = new javax.swing.JTextField();
        btnCadastrar = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnListar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabClienteScroll = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        comboOrdenacao = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaListaClientes = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        comboTipoConta = new javax.swing.JComboBox<>();
        depositoInicial = new javax.swing.JLabel();
        txtDepositoInicial = new javax.swing.JTextField();
        limite = new javax.swing.JLabel();
        txtLimite = new javax.swing.JTextField();
        numeroConta = new javax.swing.JLabel();
        txtNumeroConta = new javax.swing.JTextField();
        montanteMinimo = new javax.swing.JLabel();
        txtMontanteMinimo = new javax.swing.JTextField();
        depositoMinimo = new javax.swing.JLabel();
        txtDepositoMinimo = new javax.swing.JTextField();
        depositoInicialInvest = new javax.swing.JLabel();
        txtDepositoInicialInvest = new javax.swing.JTextField();
        btnCriarConta = new javax.swing.JButton();
        btnListarClientes = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        txtCampoCPF = new javax.swing.JTextField();
        campoCPF = new javax.swing.JLabel();
        btnBuscarConta = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        comboOperacao = new javax.swing.JComboBox<>();
        deposito = new javax.swing.JLabel();
        txtDeposito = new javax.swing.JTextField();
        saque = new javax.swing.JLabel();
        txtSaque = new javax.swing.JTextField();
        btnEfetuarOperacao = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();

        jLabel13.setText("jLabel13");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nome.setText("Nome");

        jLabel2.setText("Sobrenome");

        rg.setText("RG");

        cpf.setText("CPF");

        endereco.setText("Endereço");

        txtNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeActionPerformed(evt);
            }
        });

        txtSobreNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSobreNomeActionPerformed(evt);
            }
        });

        txtCPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCPFActionPerformed(evt);
            }
        });

        txtRG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRGActionPerformed(evt);
            }
        });

        txtEndereco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEnderecoActionPerformed(evt);
            }
        });

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        btnAtualizar.setText("Atualizar");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnListar.setText("Listar");
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });

        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        tabClienteScroll.setModel(tableModel);
        jScrollPane1.setViewportView(tabClienteScroll);

        jLabel1.setText("Cadastro de Clientes");

        comboOrdenacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ordenar por", "Nome", "Sobrenome" }));
        comboOrdenacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboOrdenacaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sobrenomeLayout = new javax.swing.GroupLayout(sobrenome);
        sobrenome.setLayout(sobrenomeLayout);
        sobrenomeLayout.setHorizontalGroup(
            sobrenomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sobrenomeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sobrenomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sobrenomeLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(122, 122, 122))
                    .addGroup(sobrenomeLayout.createSequentialGroup()
                        .addComponent(rg, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(sobrenomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(sobrenomeLayout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(txtRG))
                            .addGroup(sobrenomeLayout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(btnCadastrar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAtualizar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnExcluir)
                                .addGap(50, 50, 50)
                                .addComponent(btnListar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLimpar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboOrdenacao, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(sobrenomeLayout.createSequentialGroup()
                        .addGroup(sobrenomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(endereco, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cpf, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(sobrenomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(sobrenomeLayout.createSequentialGroup()
                                .addComponent(txtCPF)
                                .addGap(3, 3, 3))
                            .addComponent(txtEndereco)))
                    .addGroup(sobrenomeLayout.createSequentialGroup()
                        .addComponent(nome, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(txtNome))
                    .addGroup(sobrenomeLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSobreNome))
                    .addComponent(jSeparator1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        sobrenomeLayout.setVerticalGroup(
            sobrenomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sobrenomeLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(sobrenomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sobrenomeLayout.createSequentialGroup()
                        .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(sobrenomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtSobreNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(sobrenomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rg)
                            .addComponent(txtRG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(sobrenomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cpf)
                            .addComponent(txtCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(sobrenomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(endereco)
                            .addComponent(txtEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(sobrenomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCadastrar)
                            .addComponent(btnAtualizar)
                            .addComponent(btnExcluir)
                            .addComponent(btnListar)
                            .addComponent(btnLimpar)
                            .addComponent(comboOrdenacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43))
                    .addGroup(sobrenomeLayout.createSequentialGroup()
                        .addComponent(nome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Início", sobrenome);

        jLabel3.setText("Selecione um Cliente para vinculá-lo a uma Conta");

        tabelaListaClientes.setModel(tbListaCliente);
        jScrollPane2.setViewportView(tabelaListaClientes);

        jLabel5.setText("Selecione um Tipo de Conta");

        jLabel6.setText("Informe os dados abaixo:");

        comboTipoConta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboTipoConta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTipoContaActionPerformed(evt);
            }
        });

        depositoInicial.setText("Deposito Inicial");

        txtDepositoInicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDepositoInicialActionPerformed(evt);
            }
        });

        limite.setText("Limite");

        numeroConta.setText("N° Conta");

        montanteMinimo.setText("Montante Mínimo");

        depositoMinimo.setText("Depósito Mínimo");

        depositoInicialInvest.setText("Depósito Inicial");

        btnCriarConta.setText("Criar Conta");
        btnCriarConta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarContaActionPerformed(evt);
            }
        });

        btnListarClientes.setText("Listar Clientes");
        btnListarClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarClientesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jSeparator5)
                    .addComponent(jSeparator2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnListarClientes))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(depositoMinimo)
                                    .addComponent(montanteMinimo, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDepositoMinimo)
                                    .addComponent(txtMontanteMinimo)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboTipoConta, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 449, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(depositoInicialInvest, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtDepositoInicialInvest))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(limite, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numeroConta, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(depositoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(txtLimite, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtNumeroConta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtDepositoInicial, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCriarConta)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(btnListarClientes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(comboTipoConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depositoInicial)
                    .addComponent(txtDepositoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLimite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(limite))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(numeroConta)
                    .addComponent(txtNumeroConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMontanteMinimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(montanteMinimo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depositoMinimo)
                    .addComponent(txtDepositoMinimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDepositoInicialInvest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(depositoInicialInvest))
                .addGap(18, 18, 18)
                .addComponent(btnCriarConta)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cliente", jPanel2);

        jLabel4.setText("Para selecionar uma conta, informe o CPF do cliente:");

        campoCPF.setText("CPF");

        btnBuscarConta.setText("Buscar");
        btnBuscarConta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarContaActionPerformed(evt);
            }
        });

        jLabel8.setText("Selecione o tipo de operação a ser realizada:");

        comboOperacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Operação" }));
        comboOperacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboOperacaoActionPerformed(evt);
            }
        });

        deposito.setText("Valor do depósito");

        saque.setText("Valor do saque");

        btnEfetuarOperacao.setText("Efetuar operação");
        btnEfetuarOperacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEfetuarOperacaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
                    .addComponent(jSeparator3)))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(campoCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCampoCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(btnBuscarConta)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator6)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnEfetuarOperacao)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboOperacao, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(deposito, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtDeposito))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(saque, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtSaque))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoCPF)
                    .addComponent(txtCampoCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarConta))
                .addGap(29, 29, 29)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboOperacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deposito)
                    .addComponent(txtDeposito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saque)
                    .addComponent(txtSaque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(btnEfetuarOperacao)
                .addContainerGap(217, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Conta", jPanel3);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 650, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 575, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Fim", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeActionPerformed

    private void txtSobreNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSobreNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSobreNomeActionPerformed

    private void txtCPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCPFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCPFActionPerformed

    private void txtRGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRGActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRGActionPerformed

    private void txtEnderecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEnderecoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEnderecoActionPerformed

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        String nome = txtNome.getText();
        String sobreNome = txtSobreNome.getText();
        String rg = txtRG.getText();
        String cpf = txtCPF.getText();
        String endereco = txtEndereco.getText();
        
        if(cpf.equals("")){
            JOptionPane.showMessageDialog(null,"CPF não pode ser vazio.\n", "Informação", JOptionPane.INFORMATION_MESSAGE);
            return;            
        }
        
        Cliente c = new Cliente(nome,sobreNome,rg,cpf,endereco);
        Sistema.hashClientes.put(cpf, c);
        this.tableModel.setListaContatos(Sistema.hashClientes);
        this.tabClienteScroll.setRowSelectionInterval(Sistema.hashClientes.size()-1, Sistema.hashClientes.size()-1);
        this.clienteSelecionadoParaAtualizacao = c;
        linhaClicadaParaAtualizacao = Sistema.hashClientes.size()-1;
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        Cliente c = this.getClienteParaAtualizar();
        if(c==null){
            return;
        }
        Sistema.hashClientes.replace(c.getCpf(), c);
        this.tableModel.atualizarCliente(linhaClicadaParaAtualizacao);
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        List<Cliente> listaExcluir = getClienteParaExcluirDaTabela();
        if(listaExcluir.isEmpty()){
            JOptionPane.showMessageDialog(null,"Selecione alguma linha para excluir.\n", "Informação", JOptionPane.INFORMATION_MESSAGE);
            return;            
        }
        this.tableModel.removeClientes(listaExcluir);
        for(Cliente c:listaExcluir)
            Sistema.hashClientes.remove(c.getCpf());
        this.clienteSelecionadoParaAtualizacao = null;
        linhaClicadaParaAtualizacao=-1;
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
        tableModel.setListaContatos(Sistema.hashClientes);
        this.clienteSelecionadoParaAtualizacao = null;
        linhaClicadaParaAtualizacao=-1;
    }//GEN-LAST:event_btnListarActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        txtNome.setText("");
        txtSobreNome.setText("");
        txtRG.setText("");
        txtCPF.setText("");
        txtEndereco.setText("");
        tableModel.setListaContatos(Sistema.hashClientes);
        
        //this.clienteSelecionadoParaAtualizacao = null;;
        //linhaClicadaParaAtualizacao=-1;
        
        //a limpeza dos campos de texto afetará apenas tableModel e não tbListaCliente
        if (tabelaListaClientes.getModel() == tableModel) {
            this.clienteSelecionadoParaAtualizacao = null;
            linhaClicadaParaAtualizacao = -1;
        }
    }//GEN-LAST:event_btnLimparActionPerformed

    private void comboTipoContaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTipoContaActionPerformed
        String selectedTipoConta = (String) comboTipoConta.getSelectedItem();

        // Primeiro, ocultamos todos os campos
        depositoInicial.setVisible(false);
        txtDepositoInicial.setVisible(false);
        depositoInicialInvest.setVisible(false);
        txtDepositoInicialInvest.setVisible(false);
        depositoMinimo.setVisible(false);
        txtDepositoMinimo.setVisible(false);
        montanteMinimo.setVisible(false);
        txtMontanteMinimo.setVisible(false);
        limite.setVisible(false);
        txtLimite.setVisible(false);
        numeroConta.setVisible(false);
        txtNumeroConta.setVisible(false);
        btnCriarConta.setVisible(false);

        // Em seguida, exibimos apenas os campos correspondentes ao tipo de conta selecionado
        if ("Conta Corrente".equals(selectedTipoConta)) {
            depositoInicial.setVisible(true);
            txtDepositoInicial.setVisible(true);
            limite.setVisible(true);
            txtLimite.setVisible(true);
            numeroConta.setVisible(true);
            txtNumeroConta.setVisible(true);
            btnCriarConta.setVisible(true);
        } else if ("Conta Investimento".equals(selectedTipoConta)) {
            montanteMinimo.setVisible(true);
            txtMontanteMinimo.setVisible(true);
            depositoMinimo.setVisible(true);
            txtDepositoMinimo.setVisible(true);
            depositoInicialInvest.setVisible(true);
            txtDepositoInicialInvest.setVisible(true);
            btnCriarConta.setVisible(true);
        }
    }//GEN-LAST:event_comboTipoContaActionPerformed

    private void txtDepositoInicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDepositoInicialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepositoInicialActionPerformed

    private void btnCriarContaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarContaActionPerformed
        String selectedTipoConta = (String) comboTipoConta.getSelectedItem();

        // Verifica se um cliente está selecionado na tabela
        if (clienteSelecionadoParaAtualizacao != null) {
            int numeroConta = Banco.gerarNumeroConta();
            txtNumeroConta.setText(String.valueOf(numeroConta));

            if ("Conta Corrente".equals(selectedTipoConta)) {
                double depositoInicial = Double.parseDouble(txtDepositoInicial.getText());
                double limite = Double.parseDouble(txtLimite.getText());
                
                ContaCorrente contaCorrente = new ContaCorrente(clienteSelecionadoParaAtualizacao, numeroConta, depositoInicial, limite);
                // Adicionar conta ao cliente
                clienteSelecionadoParaAtualizacao.setConta(contaCorrente);
                // Adicionar conta à lista de contas do banco
                addConta(contaCorrente);
                JOptionPane.showMessageDialog(null, "Conta Corrente criada com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                
                // Limpa os campos após a criação da conta
                limparCampos();

            } else if ("Conta Investimento".equals(selectedTipoConta)) {
                
                double montanteMinimo = Double.parseDouble(txtMontanteMinimo.getText());
                double depositoMinimo = Double.parseDouble(txtDepositoMinimo.getText());
                double depositoInicialInvest = Double.parseDouble(txtDepositoInicialInvest.getText());
                
                ContaInvestimento contaInvestimento = new ContaInvestimento(clienteSelecionadoParaAtualizacao, numeroConta, depositoInicialInvest, montanteMinimo, depositoMinimo);
                // Adicionar conta ao cliente
                clienteSelecionadoParaAtualizacao.setConta(contaInvestimento);
                // Adicionar conta à lista de contas do banco
                addConta(contaInvestimento);
                JOptionPane.showMessageDialog(null, "Conta Investimento criada com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                
                // Limpa os campos após a criação da conta
                limparCampos();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, selecione um cliente antes de criar uma conta.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnCriarContaActionPerformed

    private void btnListarClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarClientesActionPerformed
        tbListaCliente.setListaContatos(Sistema.hashClientes);
        this.clienteSelecionadoParaAtualizacao = null;
        linhaClicadaParaAtualizacao = -1;
    }//GEN-LAST:event_btnListarClientesActionPerformed

    private void btnBuscarContaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarContaActionPerformed
        String cpf = txtCampoCPF.getText();

        // Verifica se o CPF foi digitado
        if (cpf.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, digite o CPF do cliente.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Verifica se o cliente com o CPF fornecido existe no banco de dados
        Cliente cliente = Sistema.hashClientes.get(cpf);
        if (cliente == null) {
            JOptionPane.showMessageDialog(this, "Cliente com o CPF fornecido não encontrado.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Verifica se o cliente tem uma conta associada
        Conta conta = cliente.getConta();
        if (conta == null) {
            JOptionPane.showMessageDialog(this, "Cliente não possui uma conta associada.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Obtém o tipo da conta e o número da conta
        String tipoConta = conta.getClass().getSimpleName();
        int numeroConta = conta.getNumero();

        // Exibe as informações da conta em uma caixa de diálogo
        String mensagem = String.format("Cliente: %s\nCPF: %s\nTipo de Conta: %s\nNúmero da Conta: %d\nSaldo: R$ %.2f", cliente.getNome(), cpf, tipoConta, numeroConta, conta.getSaldo());
        JOptionPane.showMessageDialog(this, mensagem, "Informações da Conta", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnBuscarContaActionPerformed

    private void comboOperacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboOperacaoActionPerformed
        
        String operacaoSelecionada = (String) comboOperacao.getSelectedItem();
        String cpf = txtCampoCPF.getText();

        // Verifica se o CPF foi digitado
        if (cpf.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, digite o CPF do cliente.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Verifica se o cliente com o CPF fornecido existe no banco de dados
        Cliente cliente = Sistema.hashClientes.get(cpf);
        if (cliente == null) {
            JOptionPane.showMessageDialog(this, "Cliente com o CPF fornecido não encontrado.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Verifica se o cliente tem uma conta associada
        Conta conta = cliente.getConta();
        if (conta == null) {
            JOptionPane.showMessageDialog(this, "Cliente não possui uma conta associada.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Primeiro, ocultamos todos os campos
        deposito.setVisible(false);
        txtDeposito.setVisible(false);
        saque.setVisible(false);
        txtSaque.setVisible(false);
        btnEfetuarOperacao.setVisible(false);

        switch (operacaoSelecionada) {
            case "Saque":
                saque.setVisible(true);
                txtSaque.setVisible(true);
                btnEfetuarOperacao.setVisible(true);
                break;
            case "Depósito":
                deposito.setVisible(true);
                txtDeposito.setVisible(true);
                btnEfetuarOperacao.setVisible(true);
                break;
            case "Ver saldo":
                verificarSaldo(conta);
                break;
            case "Remunera":
                remunerarConta(conta);
                break;
            default:
                JOptionPane.showMessageDialog(this, "Operação não suportada.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_comboOperacaoActionPerformed

    private void realizarSaque(Conta conta) {
        // Lógica para realizar um saque
        String valorSaqueStr = txtSaque.getText();
        if (valorSaqueStr == null || valorSaqueStr.isEmpty()) {
            return;
        }

        try {
            double valorSaque = Double.parseDouble(valorSaqueStr);
            if (conta.saca(valorSaque)) {
                JOptionPane.showMessageDialog(this, "Saque realizado com sucesso.", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Falha ao realizar o saque.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } 
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Valor inválido. Por favor, digite um número válido.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
    }

    private void realizarDeposito(Conta conta) {
        // Lógica para realizar um depósito
        String valorDepositoStr = txtDeposito.getText();
        if (valorDepositoStr == null || valorDepositoStr.isEmpty()) {
            return;
        }

        try {
            double valorDeposito = Double.parseDouble(valorDepositoStr);
            if (conta.deposita(valorDeposito)) {
                JOptionPane.showMessageDialog(this, "Depósito realizado com sucesso.", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Falha ao realizar o depósito.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Valor inválido. Por favor, digite um número válido.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void verificarSaldo(Conta conta) {
        // Lógica para verificar saldo
        double saldo = conta.getSaldo();
        JOptionPane.showMessageDialog(this, "Saldo atual: " + saldo, "Saldo", JOptionPane.INFORMATION_MESSAGE);
    }

    private void remunerarConta(Conta conta) {
        // Lógica para remunerar a conta
        conta.remunera();
        JOptionPane.showMessageDialog(this, "Conta remunerada com sucesso. Saldo atual: R$ " + conta.getSaldo(), "Sucesso", JOptionPane.INFORMATION_MESSAGE);
    }
    
    
    
    private void btnEfetuarOperacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEfetuarOperacaoActionPerformed
        String operacaoSelecionada = (String) comboOperacao.getSelectedItem();
        String cpf = txtCampoCPF.getText();

        // Verifica se o cliente com o CPF fornecido existe no banco de dados
        Cliente cliente = Sistema.hashClientes.get(cpf);
        if (cliente == null) {
            JOptionPane.showMessageDialog(this, "Cliente com o CPF fornecido não encontrado.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Verifica se o cliente tem uma conta associada
        Conta conta = cliente.getConta();
        if (conta == null) {
            JOptionPane.showMessageDialog(this, "Cliente não possui uma conta associada.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Verifica se a operação selecionada é um Saque ou Depósito
        switch (operacaoSelecionada) {
            case "Saque":
                realizarSaque(conta);
                break;
            case "Depósito":
                realizarDeposito(conta);
                break;
            default:
                JOptionPane.showMessageDialog(this, "Operação não suportada.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEfetuarOperacaoActionPerformed

    private void comboOrdenacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboOrdenacaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboOrdenacaoActionPerformed

    private void tabClienteMouseClicked(java.awt.event.MouseEvent evt) {                                        
        //Pega a linha clicada
        linhaClicadaParaAtualizacao = this.tabClienteScroll.rowAtPoint(evt.getPoint());
        //Pega o contato da linha clicada
        Cliente cliente = this.tableModel.getCliente(linhaClicadaParaAtualizacao);
        //Seta os dados no formulário
        this.setCliente(cliente);
    }               
    
    private void tabelaListaClientesMouseClicked(java.awt.event.MouseEvent evt) {                                        
        // Pega a linha clicada
        linhaClicadaParaAtualizacao = this.tabelaListaClientes.rowAtPoint(evt.getPoint());
        // Pega o contato da linha clicada
        Cliente cliente = this.tbListaCliente.getCliente(linhaClicadaParaAtualizacao);
        // Seta os dados no formulário
        this.setCliente(cliente);
    }
    
    
    private void formWindowActivated(java.awt.event.WindowEvent evt) {                                     
        // TODO add your handling code here:
    }                                    
    
    private List<Cliente> getClienteParaExcluirDaTabela(){
        int[] linhasSelecionadas = this.tabClienteScroll.getSelectedRows();
        List<Cliente> listaExcluir = new ArrayList();
        for (int i = 0; i < linhasSelecionadas.length; i++) {
            Cliente contato = this.tableModel.getCliente(linhasSelecionadas[i]);
            listaExcluir.add(contato);
        }
        return listaExcluir;
    }
    
    private Cliente getClienteParaAtualizar() {
        if(clienteSelecionadoParaAtualizacao==null){
            JOptionPane.showMessageDialog(null,"Selecione um cliente na tabela para atualizar.\n", "Informação", JOptionPane.INFORMATION_MESSAGE);
            return null;
        }
        if(!txtCPF.getText().equals(clienteSelecionadoParaAtualizacao.getCpf())){
            JOptionPane.showMessageDialog(null,"Você não pode atualizar o CPF!!!!\n", "Informação", JOptionPane.INFORMATION_MESSAGE);
            txtCPF.setText(clienteSelecionadoParaAtualizacao.getCpf());
            return null;
        }
        
        clienteSelecionadoParaAtualizacao.setNome(txtNome.getText());
        clienteSelecionadoParaAtualizacao.setSobreNome(txtSobreNome.getText());
        clienteSelecionadoParaAtualizacao.setRg(txtRG.getText());
        clienteSelecionadoParaAtualizacao.setEndereco(txtEndereco.getText());
        
        return clienteSelecionadoParaAtualizacao;
                
    }
    
    private void setCliente(Cliente c){
        this.clienteSelecionadoParaAtualizacao = c;
        txtNome.setText(c.getNome());
        txtSobreNome.setText(c.getSobreNome());
        txtRG.setText(c.getRg());
        txtCPF.setText(c.getCpf());
        txtEndereco.setText(c.getEndereco());        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Banco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Banco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Banco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Banco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Banco().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnBuscarConta;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnCriarConta;
    private javax.swing.JButton btnEfetuarOperacao;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnListar;
    private javax.swing.JButton btnListarClientes;
    private javax.swing.JLabel campoCPF;
    private javax.swing.JComboBox<String> comboOperacao;
    private javax.swing.JComboBox<String> comboOrdenacao;
    private javax.swing.JComboBox<String> comboTipoConta;
    private javax.swing.JLabel cpf;
    private javax.swing.JLabel deposito;
    private javax.swing.JLabel depositoInicial;
    private javax.swing.JLabel depositoInicialInvest;
    private javax.swing.JLabel depositoMinimo;
    private javax.swing.JLabel endereco;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel limite;
    private javax.swing.JLabel montanteMinimo;
    private javax.swing.JLabel nome;
    private javax.swing.JLabel numeroConta;
    private javax.swing.JLabel rg;
    private javax.swing.JLabel saque;
    private javax.swing.JPanel sobrenome;
    private javax.swing.JTable tabClienteScroll;
    private javax.swing.JTable tabelaListaClientes;
    private javax.swing.JTextField txtCPF;
    private javax.swing.JTextField txtCampoCPF;
    private javax.swing.JTextField txtDeposito;
    private javax.swing.JTextField txtDepositoInicial;
    private javax.swing.JTextField txtDepositoInicialInvest;
    private javax.swing.JTextField txtDepositoMinimo;
    private javax.swing.JTextField txtEndereco;
    private javax.swing.JTextField txtLimite;
    private javax.swing.JTextField txtMontanteMinimo;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtNumeroConta;
    private javax.swing.JTextField txtRG;
    private javax.swing.JTextField txtSaque;
    private javax.swing.JTextField txtSobreNome;
    // End of variables declaration//GEN-END:variables
}
